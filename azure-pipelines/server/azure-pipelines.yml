# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

parameters:
- name: image
  displayName: Pool Image
  type: string
  default: windows-2019
  values:
  - windows-latest
  - windows-2022
  - windows-2019
  - ubuntu-latest
  - ubuntu-20.04
  - ubuntu-18.04
  - macOS-latest
  - macOS-11
  - macOS-10.15
- name: configuration
  displayName: Build configuration
  type: string
  default: Release
  values:
    - Release
    - Debug

stages:
  - stage: build_and_unit_test
    pool:
      name: Azure Pipelines
      vmImage: ${{ parameters.image }}
      demands:
      - msbuild
      - Cmd
    jobs:
    - job:
      steps:
      - task: VisualStudioTestPlatformInstaller@1
        displayName: 'Visual Studio Test Platform Installer'
        inputs:
          versionSelector: specificVersion
          testPlatformVersion: 16.6.1
      - task: DotNetCoreCLI@2 
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          projects: '$(System.DefaultWorkingDirectory)/src/**/*.csproj'
          feedsToUse: 'select'
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build ${{ parameters.configuration }}'
        inputs:
          command: 'build'
          projects: '$(System.DefaultWorkingDirectory)/src/**/*.csproj'
          arguments: '--configuration ${{ parameters.configuration }}'
      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: test
          projects: '$(System.DefaultWorkingDirectory)/src/Covid19Radar.Api.Tests/*.Tests.csproj'
          arguments: '--logger trx --settings $(System.DefaultWorkingDirectory)/Covid19Radar.Functions.runsettings --collect:"XPlat Code Coverage"'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '**/*.trx'
          mergeTestResults: true
      - task: DotNetCoreCLI@2
        displayName: 'dotnet Install ReportGenerator tool'
        inputs:
          command: custom
          custom: tool
          arguments: 'install --tool-path . dotnet-reportgenerator-globaltool'
      - task: BatchScript@1
        displayName: 'Create reports'
        inputs:
          filename: ./reportgenerator
          arguments: '-reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage from $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  '
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  '
          pathToSources: '$(System.DefaultWorkingDirectory)'
          reportDirectory: '$(Build.SourcesDirectory)/coverlet/reports/'
      - task: ArchiveFiles@2
        displayName: 'Archive Api'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/src/Covid19Radar.Api/bin/Release/netcoreapp3.1/'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/Api.zip'
      - task: ArchiveFiles@2
        displayName: 'Archive Background'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/src/Covid19Radar.Background/bin/Release/netcoreapp3.1/'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/Background.zip'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
  - stage: deploy_to_dev_env
    dependsOn:
    - build_and_unit_test
    condition: succeeded()
    jobs: 
    - deployment: Covid19Radar_function
      displayName: deploy to development env
      pool:
        name: Azure Pipelines
        vmImage: ${{ parameters.image }}
        demands:
        - msbuild
        - Cmd
      environment: Covid19Radar_function_devlopment
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: $(ServiceConnection)
                appType: 'functionApp'
                appName: '$(AppName_Api)1'
                package: '$(Pipeline.Workspace)/drop/Api.zip'
                deploymentMethod: 'zipDeploy'
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: $(ServiceConnection)
                appType: 'functionApp'
                appName: '$(AppName_Background)'
                package: '$(Pipeline.Workspace)/drop/Background.zip'
                deploymentMethod: 'zipDeploy'
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription:  $(ServiceConnection)
                appType: 'functionApp'
                appName: '$(AppName_Api)2'
                package: '$(Pipeline.Workspace)/drop/Api.zip'
                deploymentMethod: 'zipDeploy'

